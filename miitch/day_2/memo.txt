--조건부 연산자 ‘?’--
※ 부적절한 ‘?’
아래와 같이 결과를 변수에 할당하는 것이 아닌, 결과에 따라 다른 표현식을 실행하려는 경우
물음표 연산자보다 if 문이 적합하다.

let company = prompt('자바스크립트는 어떤 회사가 만들었을까요?', '');
(company == 'Netscape') ?
   alert('정답입니다!') : alert('오답입니다!');

물음표 연산자의 사용 목적 : 조건에 따라 반환 값을 달리하는 경우
여러 분기를 만들어 처리할 때는 if를 사용한다.


--if를 || , && 로 대체하는 코드도 있다--
※ 비권장
어떤 개발자들은 AND 연산자 &&를 if문을 ‘짧게’ 줄이는 용도로 사용하곤 합니다.
 => 사용하지는 않더라도 알아두는 것이 다른 코드를 읽을 때 좋을 것 같다.

예시:
  let x = 1;
  (x > 0) && alert( '0보다 큽니다!' );

&&의 오른쪽 피연산자는 평가가 && 우측까지 진행되어야 실행됩니다.
즉, (x > 0)이 참인 경우에만 alert문이 실행되죠.

&&를 사용한 코드가 더 짧긴 하지만 if문을 사용한 예시가 코드에서 무엇을 구현하고자 하는지
더 명백히 드러내고, 가독성도 좋습니다.
그러니 if 조건문이 필요하면 if를 사용하고 AND 연산자는 연산자 목적에 맞게 사용합시다.


-- NOT 연산자 ! --
NOT 연산자는 역으로 변환된 불린형을 반환한다.
이를 이용해 Boolean 함수와 같은 역할을 할 수도 있다.
"0" => True
!"0" => False => 역으로 변환
!!"0" => True => 역으로 변환한 후 다시 역으로 변환


-- null 병합 연산자 ?? --
※ IE 브라우저는 지원하지 않는다.
여러 피연산자 중 그 값이 "확정되어 있는" 변수를 찾을 수 있다.
??를 이용해 변수에 기본 값을 할당하는 용도로 사용할 수 있다.
   ( height = height ?? 100  // height 가 null, undefined 인 경우 100을 할당한다)

> x = (a !== null && a !== undefined) ? a : b;
위의 코드는 아래 코드와 동일하다
> x = a ?? b

  -> a 가 null 도 아니고 undefined 도 아니면 a
  -> 그 외의 경우에는 b

'??' 과 '||'의 차이
  ||는 첫 번째 truthy 값을 반환한다
  ??는 첫 번째 정의된 값을 반환한다
  null, undefined, 숫자 0 을 다루어야 할 때 매우 중요한 역할을 한다.

?? 는 &&, || 과 함께 사용하지 못한다
제약을 피하려면 괄호를 사용한다.
let x = 1 && 2 ?? 3; // SyntaxError: Unexpected token '??'
let x = (1 && 2) ?? 3; // 2


-- 반복문 --
while, do...while, for

do while 반복문은 조건 판단과 상관없이 본문을 "최소한 한번"이라도 실행하려고 할 때 사용한다.

== for 반복문 ==
・카운터 변수 선언
  아래 ①과 같이 선언하면 반복문 안에서만 해당 변수에 접근할 수 있다.
  ②와 같이 선언하면 반복문 밖에서도 해당 변수를 사용할 수 있다.

  ① for( let i = 0; ...) {}
  ②
    let i = 0;
    for ( i = 0; ...) {]

・구성요소 생략
구성요소를 생략하여 아래와 같이 사용하는 것도 가능하다
  let i = 0;
  for (; i < 3; i++) {}

아래와 같이 모든 구성 요소를 생략할 수도 있다.
for (;;) {}

반복문의 시작이나 끝에서 조건을 확인하는 것이 아니라 본문 가운데 혹은 여러곳에서 조건을 확인해야하는 경우

・반복문 빠져나오기 - break
  '무한반복문 + break' 조합을 사용하면 좋다.

・다음 반복으로 넘어가기 - continue
  현재의 반복을 강제로 종료시키고 다음 반복으로 넘어간다
  continue 를 잘 활용하면 중첩을 줄여서 가독성 좋은 코드를 짤 수 있다.

  // 현재 반복에서 i 가 짝수인 경우 반복을 중단하고 다음 반복을 실행
    for (let i = 0; i < 10; i++) if (i % 2 == 0)  continue;

⚠ break, continue 는 삼항 연산자에서는 사용할 수 없다.

・ break/continue와 레이블
중첩된 반복문을 한 번에 빠져나와야 하는 경우 레이블을 사용할 수 있다

labelName: for (...) {... break outer;} 