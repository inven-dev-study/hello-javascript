== set ==
set은 중복을 허용하지 않는 값을 저장한다.

set 대신 배열을 사용할 때는 중복값 여부를 arr.find를 통해 확인해야 하지만
set은 중복을 허용하지 않으므로 성능면에서 더 좋다.

・ new Set(iterable) – set을 만듭니다. 이터러블 객체를 전달받으면(대개 배열을 전달받음) 그 안의 값을 복사해 set에 넣어줍니다.
・ set.add(value) – 값을 추가하고 set 자신을 반환합니다.
・ set.delete(value) – 값을 제거합니다. 호출 시점에 set 내에 값이 있어서 제거에 성공하면 true, 아니면 false를 반환합니다.
・ set.has(value) – set 내에 값이 존재하면 true, 아니면 false를 반환합니다.
・ set.clear() – set을 비웁니다.
・ set.size – set에 몇 개의 값이 있는지 세줍니다.

```
let set = new Set();

let john = { name: "John" };
let pete = { name: "Pete" };
let mary = { name: "Mary" };

// 어떤 고객(john, mary)은 여러 번 방문할 수 있습니다.
set.add(john);
set.add(pete);
set.add(mary);
set.add(john);
set.add(mary);

// set에는 유일무이한 값만 저장됩니다.
alert( set.size ); // 3

for (let user of set) {
  alert(user.name); // // John, Pete, Mary 순으로 출력됩니다.
}
```

== 반복 작업하기 ==
for..of 나 forEach 를 사용해 set의 값에 반복 작업을 수행할 수 있다.
```
let set = new Set(["oranges", "apples", "bananas"]);

for (let value of set) alert(value);

// forEach를 사용해도 동일하게 동작합니다.
set.forEach((value, valueAgain, set) => { // map 과의 호환성 때문에 set의 forEach 의 첫번째, 두번째 인수는 똑같은 값을 받는다.
  alert(value);
});
```
map 과 마찬가지로 반복 작업을 위한 메서드가 있다.
・set.keys() – set 내의 모든 값을 포함하는 이터러블 객체
・set.values() – set.keys와 동일 (map과의 호환성을 위한 메서드)
・set.entries() – set 내의 각 값을 이용해 만든 [value, value] 배열을 포함하는 이터러블 객체 (map과의 호환성을 위한 메서드)

