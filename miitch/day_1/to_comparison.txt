자바스크립트 기본
  2. 코드 구조  ~  9. 비교 연산자


==엄격 모드 use strict==
ES5부터 지원되는 지시자 "use strict"
 - 스크립트를 "모던한 방식"으로 실행시킨다.

「코드를 클래스와 모듈을 사용해 구성한다면 "use strict"를 생략해도 됩니다. 」
 -> 클래스와 모듈은 ES6 부터 지원되는 기능이라, 자동으로 엄격모드인가?



==변수와 상수==
변수를 선언할 때 : let
상수를 선언할 때 : const

・ 문자, 숫자, 기호 $, 기호 _
   - 단, 숫자는 첫글자로 사용 불가
   - 대소문자를 구별한다.

・ use strict(엄격모드)를 쓰지 않으면 선언하지 않고 할당만 해도 변수가 생성된다
   -> 엄격모드를 쓰는 경우에는 에러

・ 관습적으로, 특정한 값을 상수로 할당하여 사용할 때는 대문자로 표기한다.
   -> 특정한 경우에 값을 받아와서 저장하는 형태로 사용하는 상수의 경우 보통 변수처럼 카멜표기법으로 표기한다

-var-
・ 코드 블록을 무시하므로, 전역에서 코드 블록 안에 있는 var 변수에 접근할 수 있다.
  -> let의 경우 코드 블록 안에서만 접근할 수 있다.

・ var 변수가 함수 안의 코드 블록에 있다면 함수 안에서만 접근할 수 있다.

・ 재선언을 할 수 있다
   -> let의 경우 이미 선언되어 있다는 에러가 나온다

・ var 선언은 스크립트(함수)가 선언될 때 처리된다. (호이스팅)
  때문에 함수의 어느 위치에서든 참조할 수 있다.
  그러나 할당은 호이스팅되지 않으므로, 할당이 이루어지기 전에 참조한 경우 undefined를 반환한다.

・ 즉시실행함수표현식
   (function() {})(); 형태로 var에 블록레벨 스코프를 가질 수 있게 하여 활용할 수 있다. = 전역에서 접근할 수 없게 한다
    모던 자바스크립트(let)의 경우 이 방식을 사용할 필요가 없다.



==자료형==
・ JS의 변수 타입은 언제든지 바뀔 수 있다 (동적타입언어)

・ 숫자형( + bigInt ), 문자형, 불린형, null, undefined, 객체형, 심볼형

・ null : "존재하지 않는" "비어있는" "알 수 없는"

・ undefined : 값이 "할당되지 않음"

・ typeof 연산자를 통해 인수의 자료형을 문자열 형태로 반환받을 수 있다.

・ null : typeof null 은 object를 반환하지만 언어 상의 오류일 뿐, null은 객체가 아니다.



==alert, prompt, confirm==
모달창을 띄운다. 
alert : 메시지를 보여줌 ( 매개변수는 문자형이어야 하며, 다른 형의 값을 받으면 문자형으로 자동 변환된다)
prompt : 텍스트 입력 필드를 제공한다 ( 취소 또는 Esc를 누른 경우 null을 반환한다. )
confirm : 확인, 취소 버튼을 보여준다. ( 확인을 누르면 true, 취소 또는 Esc를 누른 경우 false를 반환한다. )



==형 변환(원시형의 형 변환)==
함수와 연산자에 전달되는 값은 대부분 '적절한' 자료형으로 '자동변환'된다.
 + 전달받은 값을 원하는 값으로 변환하는 경우도 형 변환이라고 할 수 있다.

・ 문자형: String(value) 함수로 값을 문자열로 변환할 수 있다.

・ 숫자형: Number(value) 함수로 값을 숫자형으로 변환할 수 있다.
    -> 수학과 관련된 함수와 표현식에서 자동 변환된다. ("6" / "2") 는 6 / 2 로 변환된 후 연산이 수행되어 숫자형 3을 반환한다.
    -> 숫자 이외의 글자가 들어간 문자열을 숫자형으로 변환하려고 하면 NaN 을 반환한다.
    -> undefined => NaN / null => 0 / true and false => 1, 0 / string => 앞뒤 공백을 제거하고서 문자열이 남아있지 않다면 0, 그렇지 않은 경우 숫자 외 문자가 있다면 NaN

・ 불린형: 논리 연산 시 발생하며, Boolean(value)으로도 변환할 수 있다.
    -> 숫자 0, 빈 문자열, null, undefined, NaN => false
    -> 문자열 "0"은 true이다. ( PHP에서는 false로 취급함 )


==기본연산자와 수학==
・ 피연산자 = 인수 == argument

・ 단항 연산자: 피연산자를 하나만 받는 연산자 ( x = -x )
 └ 단항연산자 + 는 숫자형이 아닌 피연산자를 숫자형으로 변환한다. ( = Number(value) )
      let x = "1"    +x  // 1
      +true               // 1
      +""                  // 0

・ 이항 연산자: 피연산자를 두개 받는 연산자 ( y - x )
 └ 이항연산자 + 는 문자열을 연결할 때도 사용할 수 있다.
      -> 피연산자 중 하나가 문자열이면 다른 하나도 문자열로 변환된다. ( 2 + 2 + '1' )  // '41'
  -> 이항연산자와 단항연산자는 한꺼번에 쓰일 수 있다.  ( +a + +b )

・ 나머지 연산자 % : a % b 는 a를 b로 나눈 후의 나머지를 정수로 반환한다.

・ 거듭제곱 연산자 ** : 정수가 아닌 숫자에 대해서도 동장한다. 1/2 를 사용하면 제곱근을 구할 수 있다
    -> 4 ** (1/2)  // 2

・ 연산자 우선순위 : 단항 연산자가 가장 우선순위가 높고 할당연산자 = 의 우선순위는 매우 낮다.
   -> 복합 할당 연산자 ( *= += ... ) 의 우선순위는 할당연산자와 동일하다.

・ 증가(++), 감소 연산자(--) : 변수에만 쓸 수 있다. ( 5++ => Error )
   t++ -> 후위형(postfix)
   ++t -> 전위형(prefix)
  후위형과 전위형은 반환값을 사용할 때 차이가 발생한다.
  후위형은 증감 전의 기존 값을 반환한다 -> 값을 증가시키지만 증가 전의 값을 사용하려면
  전위형은 증감 후의 새로운 값을 반환한다 -> 값을 증가시킨 후 증가된 값을 바로 사용하려면

・ 비트 연산자 - 생략 : 필요할 때 공부하는 게 좋을 듯

・ 쉼표 연산자 - 여러 표현식을 코드 한 줄에서 평가할 수 있다. 마지막 표현식의 결과만 반환된다.
   -> (1+2, 3+4)   // 7(마지막 표현식 3+4의 결과인 7만 반환됨)
   -> 쉼표 연산자의 우선순위는 할당연산자보다 더 낮다. 
      활용예) for (a = 1, b = 3, c = a*b; ...)  { ... }



==비교 연산자==
> | < | == | <= | >= | !=

・ 비교연산자는 불린형을 반환한다 ( true OR false )

・ 문자열을 사전순(유니코드순)으로 비교할 수 있다. 자바스크립트에서는 대문자(A)보다 소문자(a)가 더 크다.

・ 자바스크립트는 비교하려는 값의 자료형이 다르면, 이 값들을 숫자형으로 바꾼다.

・ 동등 연산자 == 는 0 과 false를 구분하지 못한다. ( 0 == false  // true | '' = false  //true )
   -> 피연산자를 숫자형으로 바꾸기 때문에 발생하는 문제로, 이를 구별하기 위해서는
       일치 연산자 === 를 사용하여 형 변환 없이 값을 비교한다. ( 0 === false // false )


- null 과 undefined -
・ 두 값의 자료형이 다르므로 === 비교시 false 반환
   == 비교 시 특별한 규칙이 적용되어 true 반환

・ null vs 0
 >alert( null > 0 );  // (1) false
 >alert( null == 0 ); // (2) false
 >alert( null >= 0 ); // (3) true
  1) 부등호로 비교하는 경우 null은 숫자형으로 변환되어 0 이 된다.
  2) == 로 비교하는 경우에 null과 undefined는 형 변환이 일어나지 않는다.

・ undefined 는 다른 값과 비교해서는 안 된다. 
   1) 다른 값과 비교할 때 undefined 는 NaN 으로 변환되고, NaN은 피연산자로서 비교될 때 false를 반환한다.
   2) undefined 는 null , undefined 와 같고 그 외의 값과는 같지 않다.

※ 일치연산자 === 를 제외한 비교연산자의 피연산자에 undefined , null 이 오지 않도록 주의한다.
   undefined, null 이 될 가능성이 있는 변수가 부등호 연산자의 피연산자가 되지 않도록 주의한다.(undefined, null 여부를 확인한다)

